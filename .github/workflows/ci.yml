name: Test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-collect, data-retrieve, analytical-model]
      max-parallel: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.12.1

      - name: Install dependencies
        run: cd src/${{ matrix.service }} && npm install

      - name: Run linting
        run: cd src/${{ matrix.service }} && npm run lint

      - name: Run typechecking
        run: cd src/${{ matrix.service }} && npm run typecheck

      - name: Run tests
        run: cd src/${{ matrix.service }} && npm run test

      # - name: Install dependencies
      #   run: cd src/tests/e2eTest && npm install

      # - name: Run e2e tests
      #   run: cd src/tests/e2eTest && npm run test

      # - name: Install dependencies
      #   run: cd src/tests/contractTest && npm install

      # - name: Run contract tests
      #   run: cd src/tests/contractTest && npm run test

      - name: Install Puppeteer and pdf-lib
        run: npm install puppeteer pdf-lib

      - name: Convert HTML coverage to PDF
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          async function convertHTMLToPDF() {
            // Launch browser
            const browser = await puppeteer.launch();
            const page = await browser.newPage();
            
            // Path to the index.html file
            const coverageIndexPath = path.join(process.cwd(), 'coverage/lcov-report/index.html');
            
            // Check if the file exists
            if (!fs.existsSync(coverageIndexPath)) {
              console.error('Coverage report not found at:', coverageIndexPath);
              process.exit(1);
            }
            
            // Load the coverage report
            await page.goto('file://' + coverageIndexPath);
            
            // Create PDF output directory if it doesn't exist
            const pdfDir = path.join(process.cwd(), 'coverage-pdf');
            if (!fs.existsSync(pdfDir)) {
              fs.mkdirSync(pdfDir);
            }
            
            // Generate PDF
            await page.pdf({
              path: path.join(pdfDir, 'coverage-report.pdf'),
              format: 'A4',
              printBackground: true,
              margin: {
                top: '20px',
                right: '20px',
                bottom: '20px',
                left: '20px'
              }
            });
            
            console.log('PDF generated successfully');
            
            // Close browser
            await browser.close();
          }

          convertHTMLToPDF().catch(err => {
            console.error('Error generating PDF:', err);
            process.exit(1);
          });
          EOF

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-pdf/${{ matrix.service }}coverage-report.pdf
          retention-days: 90

      # Package Lambda function
      - name: Package Lambda function
        run: |
          cd src/${{ matrix.service }}
          zip -r ../../terraform/lambda-deployment-package-${{ matrix.service }}.zip .

      # Upload as an artifact
      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ matrix.service }}
          path: terraform/lambda-deployment-package-${{ matrix.service }}.zip
          retention-days: 10

  mark-success:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create success marker file
        run: echo "CI completed successfully" > ci-success-marker.txt

      - name: Upload CI success marker
        uses: actions/upload-artifact@v4
        with:
          name: ci-success
          path: ci-success-marker.txt
