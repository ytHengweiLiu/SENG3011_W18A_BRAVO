name: Test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-collect, data-retrieve, analytical-model]
      max-parallel: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.12.1

      - name: Install dependencies
        run: cd src/${{ matrix.service }} && npm install

      - name: Run linting
        run: cd src/${{ matrix.service }} && npm run lint

      - name: Run typechecking
        run: cd src/${{ matrix.service }} && npm run typecheck

      - name: Run tests with coverage and capture output
        id: test_with_coverage
        run: |
          cd src/${{ matrix.service }}
          npm run test -- --coverage | tee ../../test-output.txt

      # - name: Install dependencies
      #   run: cd src/tests/e2eTest && npm install

      # - name: Run e2e tests
      #   run: cd src/tests/e2eTest && npm run test

      # - name: Install dependencies
      #   run: cd src/tests/contractTest && npm install

      # - name: Run contract tests
      #   run: cd src/tests/contractTest && npm run test

      # Extract coverage metrics from the test output
      - name: Extract coverage
        id: extract_coverage
        run: |
          # Extract the coverage percentage from the test output
          STATEMENTS=$(grep -A 5 "Coverage summary" test-output.txt | grep "Statements" | sed -E 's/.*Statements\s*:\s*([0-9.]+)%.*/\1/g' || echo "0")
          BRANCHES=$(grep -A 5 "Coverage summary" test-output.txt | grep "Branches" | sed -E 's/.*Branches\s*:\s*([0-9.]+)%.*/\1/g' || echo "0")
          FUNCTIONS=$(grep -A 5 "Coverage summary" test-output.txt | grep "Functions" | sed -E 's/.*Functions\s*:\s*([0-9.]+)%.*/\1/g' || echo "0")
          LINES=$(grep -A 5 "Coverage summary" test-output.txt | grep "Lines" | sed -E 's/.*Lines\s*:\s*([0-9.]+)%.*/\1/g' || echo "0")

          echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "lines=$LINES" >> $GITHUB_OUTPUT

          echo "Coverage extracted: Statements: $STATEMENTS%, Branches: $BRANCHES%, Functions: $FUNCTIONS%, Lines: $LINES%"

      # Generate test report
      - name: Generate test report
        run: |
          cd src/${{ matrix.service }}
          echo "# Test Report for ${{ matrix.service }}" > ../../test-report-${{ matrix.service }}.md
          echo "Date: $(date)" >> ../../test-report-${{ matrix.service }}.md
          echo "Service: ${{ matrix.service }}" >> ../../test-report-${{ matrix.service }}.md
          echo "" >> ../../test-report-${{ matrix.service }}.md
          echo "## Test Results" >> ../../test-report-${{ matrix.service }}.md

          if [ -f "../../test-results.json" ]; then
            echo "### Summary" >> ../../test-report-${{ matrix.service }}.md
            node -e "const data = require('../../test-results.json'); console.log(\`- Total Tests: \${data.numTotalTests}\`)" >> ../../test-report-${{ matrix.service }}.md
            node -e "const data = require('../../test-results.json'); console.log(\`- Passed Tests: \${data.numPassedTests}\`)" >> ../../test-report-${{ matrix.service }}.md
            node -e "const data = require('../../test-results.json'); console.log(\`- Failed Tests: \${data.numFailedTests}\`)" >> ../../test-report-${{ matrix.service }}.md

            echo "### Test Coverage" >> ../../test-report-${{ matrix.service }}.md
            echo "- Statements: ${{ steps.extract_coverage.outputs.statements }}%" >> ../../test-report-${{ matrix.service }}.md
            echo "- Branches: ${{ steps.extract_coverage.outputs.branches }}%" >> ../../test-report-${{ matrix.service }}.md
            echo "- Functions: ${{ steps.extract_coverage.outputs.functions }}%" >> ../../test-report-${{ matrix.service }}.md
            echo "- Lines: ${{ steps.extract_coverage.outputs.lines }}%" >> ../../test-report-${{ matrix.service }}.md

            echo "" >> ../../test-report-${{ matrix.service }}.md
            echo "### Failed Tests" >> ../../test-report-${{ matrix.service }}.md
            node -e "const data = require('../../test-results.json'); const failures = data.testResults?.filter(t => t.status === 'failed') || []; failures.forEach(f => { console.log(\`- \${f.name}: \${f.message || 'Failed'}\`); });" >> ../../test-report-${{ matrix.service }}.md
          else
            echo "No test results found" >> ../../test-report-${{ matrix.service }}.md
          fi

      # Convert MD to PDF
      # - name: Install md-to-pdf
      #   run: npm install -g md-to-pdf

      # - name: Convert report to PDF
      #   run: md-to-pdf test-report-${{ matrix.service }}.md

      # Upload test report as artifact
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.service }}
          path: |
            test-report-${{ matrix.service }}.md
          retention-days: 30
        if: always()

      # Package Lambda function
      - name: Package Lambda function
        run: |
          cd src/${{ matrix.service }}
          zip -r ../../terraform/lambda-deployment-package-${{ matrix.service }}.zip .

      # Upload as an artifact
      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ matrix.service }}
          path: terraform/lambda-deployment-package-${{ matrix.service }}.zip
          retention-days: 10

  mark-success:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create success marker file
        run: echo "CI completed successfully" > ci-success-marker.txt

      - name: Upload CI success marker
        uses: actions/upload-artifact@v4
        with:
          name: ci-success
          path: ci-success-marker.txt
