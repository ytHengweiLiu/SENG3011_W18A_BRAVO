name: Test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-collect, data-retrieve, analytical-model]
      max-parallel: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.12.1

      - name: Install dependencies
        run: cd src/${{ matrix.service }} && npm install

      - name: Run linting
        run: cd src/${{ matrix.service }} && npm run lint

      - name: Run typechecking
        run: cd src/${{ matrix.service }} && npm run typecheck

      - name: Run tests with coverage and generate report
        id: test_with_coverage
        run: |
          cd src/${{ matrix.service }}
          # Add a script to package.json to save output to a file with a timestamp
          node -e '
            const fs = require("fs");
            const pkg = require("./package.json");
            if (!pkg.scripts.test_with_report) {
              pkg.scripts.test_with_report = "jest --coverage | tee test-report.txt";
              fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
            }
          '
          # Run tests and save output to a file
          npm run test_with_report
          mkdir -p ../../test-reports
          cp test-report.txt ../../test-reports/test-report-${{ matrix.service }}.txt
        continue-on-error: true

      # - name: Install dependencies
      #   run: cd src/tests/e2eTest && npm install

      # - name: Run e2e tests
      #   run: cd src/tests/e2eTest && npm run test

      # - name: Install dependencies
      #   run: cd src/tests/contractTest && npm install

      # - name: Run contract tests
      #   run: cd src/tests/contractTest && npm run test

      # Convert test report to PDF
      - name: Convert test report to PDF
        run: |
          sudo apt-get update -q
          sudo apt-get install -y enscript ghostscript
          cd test-reports
          enscript -B -r -f Courier10 -o - test-report-${{ matrix.service }}.txt | ps2pdf - test-report-${{ matrix.service }}.pdf
        continue-on-error: true

      # Upload test reports as artifacts
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.service }}
          path: test-reports/test-report-${{ matrix.service }}.*
          retention-days: 30
        if: always()

      # Package Lambda function
      - name: Package Lambda function
        run: |
          cd src/${{ matrix.service }}
          zip -r ../../terraform/lambda-deployment-package-${{ matrix.service }}.zip .

      # Upload as an artifact
      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ matrix.service }}
          path: terraform/lambda-deployment-package-${{ matrix.service }}.zip
          retention-days: 10

  mark-success:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create success marker file
        run: echo "CI completed successfully" > ci-success-marker.txt

      - name: Upload CI success marker
        uses: actions/upload-artifact@v4
        with:
          name: ci-success
          path: ci-success-marker.txt
