name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Test"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Package Analytical Lambda function
        run: |
          cd src/analytical-model
          zip -r ../../terraform/lambda-deployment-package-analyse.zip .
  
      - name: Package data collection Lambda function
        run: |
          cd src/data-collect
          zip -r ../../terraform/lambda-deployment-package-collect.zip .
      - name: Package data retrieve Lambda function
        run: |
          cd src/data-retrieve
          zip -r ../../terraform/lambda-deployment-package-retrieve.zip .
      - name: List downloaded packages
        run: ls -la terraform/

      - name: echo AWS credentials
        run: |
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID"
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY"
          echo "s3_bucket_name=$BUCKET_NAME"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }} 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Import Existing Lambdas
        run: |
          cd terraform
          terraform import \
            -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
            -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
            -var="s3_bucket_name=$BUCKET_NAME" \
            -var="alert_email=$ALERT_EMAIL" \
            aws_lambda_function.nba_scraper_lambda nba-scraper-lambda || echo "nba_scraper_lambda already imported"

          terraform import \
            -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
            -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
            -var="s3_bucket_name=$BUCKET_NAME" \
            -var="alert_email=$ALERT_EMAIL" \
            aws_lambda_function.nba_retriever_lambda nba-retriever-lambda || echo "nba_retriever_lambda already imported"

          terraform import \
            -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
            -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
            -var="s3_bucket_name=$BUCKET_NAME" \
            -var="alert_email=$ALERT_EMAIL" \
            aws_lambda_function.nba_analyse_lambda nba-analyse-lambda || echo "nba_analyse_lambda already imported"

          terraform import aws_lambda_permission.apigw_scrape_lambda nba-scraper-lambda/AllowAPIGatewayInvokeScrape || echo "permission already imported"
          terraform import aws_lambda_permission.apigw_retriever_lambda nba-retriever-lambda/AllowAPIGatewayInvokeRetriever || echo "permission already imported"
          terraform import aws_lambda_permission.apigw_analyse_lambda nba-analyse-lambda/AllowAPIGatewayInvokeAnalyse || echo "permission already imported"
          terraform import aws_lambda_permission.allow_cloudwatch_to_invoke_scraper nba-scraper-lambda/AllowExecutionFromCloudWatch || echo "cloudwatch permission already imported"

          terraform import aws_cloudwatch_log_group.scraper_logs /aws/lambda/nba-scraper-lambda || echo "log group already imported"
          terraform import aws_cloudwatch_log_group.retriever_logs /aws/lambda/nba-retriever-lambda || echo "log group already imported"
          terraform import aws_cloudwatch_log_group.analyser_logs /aws/lambda/nba-analyse-lambda || echo "log group already imported"

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -input=false \
            -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
            -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
            -var="s3_bucket_name=$BUCKET_NAME" \
            -var="alert_email=$ALERT_EMAIL"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }} 
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }} 

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' # Only deploy on main branch
        run: |
          cd terraform
          terraform apply -auto-approve -input=false \
            -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
            -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
            -var="s3_bucket_name=$BUCKET_NAME" \
            -var="alert_email=$ALERT_EMAIL"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }} 
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }} 